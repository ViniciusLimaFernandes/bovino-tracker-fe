{
  "version": 3,
  "sources": ["../../vuetify/src/components/VRating/VRating.tsx"],
  "sourcesContent": ["// Styles\nimport './VRating.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps } from '@/composables/density'\nimport { makeSizeProps } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { createRange, genericComponent, getUid, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\nimport type { Prop } from 'vue'\nimport type { Variant } from '@/composables/variant'\n\ntype VRatingItemSlot = {\n  value: number\n  index: number\n  isFilled: boolean\n  isHovered: boolean\n  icon: IconValue\n  color?: string\n  props: Record<string, unknown>\n}\n\ntype VRatingItemLabelSlot = {\n  value: number\n  index: number\n  label?: string\n}\n\nexport const VRating = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    item: [VRatingItemSlot]\n    'item-label': [VRatingItemLabelSlot]\n  }>\n}>()({\n  name: 'VRating',\n\n  props: {\n    name: String,\n    itemAriaLabel: {\n      type: String,\n      default: '$vuetify.rating.ariaLabel.item',\n    },\n    activeColor: String,\n    color: String,\n    clearable: Boolean,\n    disabled: Boolean,\n    emptyIcon: {\n      type: IconValue,\n      default: '$ratingEmpty',\n    },\n    fullIcon: {\n      type: IconValue,\n      default: '$ratingFull',\n    },\n    halfIncrements: Boolean,\n    hover: Boolean,\n    length: {\n      type: [Number, String],\n      default: 5,\n    },\n    readonly: Boolean,\n    modelValue: {\n      type: Number,\n      default: 0,\n    },\n    itemLabels: Array as Prop<string[]>,\n    itemLabelPosition: {\n      type: String,\n      default: 'top',\n      validator: (v: any) => ['top', 'bottom'].includes(v),\n    },\n    ripple: Boolean,\n\n    ...makeDensityProps(),\n    ...makeSizeProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const { themeClasses } = provideTheme(props)\n    const rating = useProxiedModel(props, 'modelValue')\n\n    const range = computed(() => createRange(Number(props.length), 1))\n    const increments = computed(() => range.value.flatMap(v => props.halfIncrements ? [v - 0.5, v] : [v]))\n    const hoverIndex = ref(-1)\n    const focusIndex = ref(-1)\n    const firstRef = ref<HTMLElement>()\n    let isClicking = false\n\n    const itemState = computed(() => increments.value.map(value => {\n      const isHovering = props.hover && hoverIndex.value > -1\n      const isFilled = rating.value >= value\n      const isHovered = hoverIndex.value >= value\n      const isFullIcon = isHovering ? isHovered : isFilled\n      const icon = isFullIcon ? props.fullIcon : props.emptyIcon\n      const activeColor = props.activeColor ?? props.color\n      const color = (isFilled || isHovered) ? activeColor : props.color\n\n      return { isFilled, isHovered, icon, color }\n    }))\n\n    const eventState = computed(() => [0, ...increments.value].map(value => {\n      function onMouseenter () {\n        hoverIndex.value = value\n      }\n\n      function onMouseleave () {\n        hoverIndex.value = -1\n      }\n\n      function onFocus () {\n        if (value === 0 && rating.value === 0) {\n          firstRef.value?.focus()\n        } else {\n          focusIndex.value = value\n        }\n      }\n\n      function onBlur () {\n        if (!isClicking) focusIndex.value = -1\n      }\n\n      function onClick () {\n        if (props.disabled || props.readonly) return\n        rating.value = rating.value === value && props.clearable ? 0 : value\n      }\n\n      return {\n        onMouseenter: props.hover ? onMouseenter : undefined,\n        onMouseleave: props.hover ? onMouseleave : undefined,\n        onFocus,\n        onBlur,\n        onClick,\n      }\n    }))\n\n    function onMousedown () {\n      isClicking = true\n    }\n\n    function onMouseup () {\n      isClicking = false\n    }\n\n    const name = computed(() => props.name ?? `v-rating-${getUid()}`)\n\n    function VRatingItem ({ value, index, showStar = true }: { value: number, index: number, showStar?: boolean }) {\n      const { onMouseenter, onMouseleave, onFocus, onBlur, onClick } = eventState.value[index + 1]\n      const id = `${name.value}-${String(value).replace('.', '-')}`\n      const btnProps = {\n        color: itemState.value[index]?.color,\n        density: props.density,\n        disabled: props.disabled,\n        icon: itemState.value[index]?.icon,\n        ripple: props.ripple,\n        size: props.size,\n        tag: 'span',\n        variant: 'plain' as Variant,\n      }\n\n      return (\n        <>\n          <label\n            for={ id }\n            class={{\n              'v-rating__item--half': props.halfIncrements && value % 1 > 0,\n              'v-rating__item--full': props.halfIncrements && value % 1 === 0,\n            }}\n            onMousedown={ onMousedown }\n            onMouseup={ onMouseup }\n            onMouseenter={ onMouseenter }\n            onMouseleave={ onMouseleave }\n          >\n            <span class=\"v-rating__hidden\">{ t(props.itemAriaLabel, value, props.length) }</span>\n            {\n              !showStar ? undefined\n              : slots.item ? slots.item({\n                ...itemState.value[index],\n                props: btnProps,\n                value,\n                index,\n              })\n              : (\n                <VBtn { ...btnProps } />\n              )\n            }\n          </label>\n\n          <input\n            class=\"v-rating__hidden\"\n            name={ name.value }\n            id={ id }\n            type=\"radio\"\n            value={ value }\n            checked={ rating.value === value }\n            onClick={ onClick }\n            onFocus={ onFocus }\n            onBlur={ onBlur }\n            ref={ index === 0 ? firstRef : undefined }\n            readonly={ props.readonly }\n            disabled={ props.disabled }\n          />\n        </>\n      )\n    }\n\n    function createLabel (labelProps: { value: number, index: number, label?: string }) {\n      if (slots['item-label']) return slots['item-label'](labelProps)\n\n      if (labelProps.label) return <span>{ labelProps.label }</span>\n\n      return <span>&nbsp;</span>\n    }\n\n    useRender(() => {\n      const hasLabels = !!props.itemLabels?.length || slots['item-label']\n\n      return (\n        <props.tag\n          class={[\n            'v-rating',\n            {\n              'v-rating--hover': props.hover,\n              'v-rating--readonly': props.readonly,\n            },\n            themeClasses.value,\n          ]}\n        >\n          <VRatingItem value={ 0 } index={ -1 } showStar={ false } />\n\n          { range.value.map((value, i) => (\n            <div class=\"v-rating__wrapper\">\n              {\n                hasLabels && props.itemLabelPosition === 'top'\n                  ? createLabel({ value, index: i, label: props.itemLabels?.[i] })\n                  : undefined\n              }\n              <div\n                class={[\n                  'v-rating__item',\n                  {\n                    'v-rating__item--focused': Math.ceil(focusIndex.value) === value,\n                  },\n                ]}\n              >\n                { props.halfIncrements ? (\n                  <>\n                    <VRatingItem value={ value - 0.5 } index={ i * 2 } />\n                    <VRatingItem value={ value } index={ (i * 2) + 1 } />\n                  </>\n                ) : (\n                  <VRatingItem value={ value } index={ i } />\n                ) }\n              </div>\n              {\n                hasLabels && props.itemLabelPosition === 'bottom'\n                  ? createLabel({ value, index: i, label: props.itemLabels?.[i] })\n                  : undefined\n              }\n            </div>\n          )) }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VRating = InstanceType<typeof VRating>\n"],
  "mappings": "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",
  "names": ["VRating", "genericComponent", "name", "props", "String", "itemAriaLabel", "type", "default", "activeColor", "color", "clearable", "Boolean", "disabled", "emptyIcon", "IconValue", "fullIcon", "halfIncrements", "hover", "length", "Number", "readonly", "modelValue", "itemLabels", "Array", "itemLabelPosition", "validator", "v", "includes", "ripple", "makeDensityProps", "makeSizeProps", "makeTagProps", "makeThemeProps", "emits", "value", "setup", "slots", "t", "useLocale", "themeClasses", "provideTheme", "rating", "useProxiedModel", "range", "computed", "createRange", "increments", "flatMap", "hoverIndex", "ref", "focusIndex", "firstRef", "isClicking", "itemState", "map", "isHovering", "isFilled", "isHovered", "isFullIcon", "icon", "eventState", "onMouseenter", "onMouseleave", "onFocus", "focus", "onBlur", "onClick", "undefined", "onMousedown", "onMouseup", "getUid", "VRatingItem", "index", "showStar", "id", "replace", "btnProps", "density", "size", "tag", "variant", "item", "createLabel", "labelProps", "label", "useRender", "hasLabels", "i", "Math", "ceil"]
}
